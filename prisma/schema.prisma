// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String  @id @default(uuid())
  clerkUserId String  @unique // clerk user id
  email       String  @unique
  name        String?
  imageUrl    String?
  industry    String? // Combined industry-subindustry (e.g. "tech-software-development")


    industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Profile fields
  bio        String?
  experience Int?       // Years of experience
  skills     String[]   // Array of skills

  assessments Assessment[]
  resume      Resume?
  coverLetter CoverLetter[]

}



model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float    // Overall quiz score
  questions      Json[]   // Array of (question, answer, userAnswer, isCorrect)
  category       String   // "Technical", "Behavioral", etc.
  improvementTip String?  // AI-generated improvement tip
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}




model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique   // One resume per user
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text  // Markdown content

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CoverLetter {
 id               String    @id @default(cuid())
 userId           String
 user             User      @relation(fields: [userId], references: [id])
 content          String    // Markdown content
 jobDescription   String?
 companyName      String    // Name of the company applying to
 position         String    // Position applying for
 createdAt        DateTime  @default(now())
 updatedAt        DateTime  @updatedAt

 @@index([userId])
}





model IndustryInsight {
  id               String         @id @default(cuid())
  industry         String         @unique
  users            User[]
  salaryRanges     Json[]
  growthRate       Float
  demandLevel      DemandLevel    @default(MEDIUM)
  topSkills        String[]
  marketOutlook    MarketOutlook  @default(NEUTRAL)
  keyTrends        String[]
  recommendedSkills String[]
  lastUpdated      DateTime       @default(now())
  nextUpdate       DateTime

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
